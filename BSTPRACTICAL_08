#include<iostream>
using namespace std;

struct node{
    int data;
    node*left;
    node*right;
};

class bst{
    public:
    node*root;
    void create();
    void insert(node*,node*);
    int height(node*);
    void minval(node*);
    
    bst()
    {
        root=NULL;
    }
};
void bst::create()
{
    node *nn = new node;
    cout << "Enter data for node: ";
    cin >> nn->data;
    nn->left = NULL;
    nn->right = NULL;
    if (root == NULL) {
        root = nn;
    } else {
        insert(root, nn);
    }


}

void bst::insert(node*root,node*nn)
{
    if(nn->data < root->data)
    {
        if(root->left == NULL)
        {
            root->left=nn;
        }
        else{
            insert(root->left,nn);   //give recursive call to the insert function and takes accurate value for new node.
        }
    }
    else{
        if(root->right == NULL)
        {
            root->right=nn;
        }
        else{
            insert(root->right,nn);
        }
    }

}

int bst::height(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else{
        int hl=height(root->left);
        int hr=height(root->right);

        return(hr>hl ? hr:hl)+1;
    }
}

void bst::minval(node*root)
{
    node*temp=root;
    while(temp && temp->left !=NULL)
    {
        temp=temp->left;
    }

    if(temp)
    {
        cout<<"MIN value is :"<<temp->data<<endl;
    }
}

int main()
{
    int ch;
    bst b;

    do{
        cout<<"\n......MENU......\n";
        cout<<"1.Insert\n";
        cout<<"2.Height\n";
        cout<<"3.Minvalue\n";
        cout<<"4.Exit\n";
        cout<<"Enter Your choice:";
        cin>>ch;

        switch(ch)
        {
            case 1:
            b.create();
            break;

            case 2:
            cout<<"height of bst is:"<<b.height(b.root);
            break;

            case 3:
            b.minval(b.root);
            break;

            case 4:
            exit(0);
        }
    }while(ch!=0);
    return 0;
}
